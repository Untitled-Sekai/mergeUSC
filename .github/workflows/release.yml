name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      - name: Debug directory structure
        run: |
          find ./crates -type d | sort
          ls -la ./crates

      - name: Standardize directory structure
        run: |
          # コアライブラリの実際のディレクトリ名を見つける
          CORE_DIR=$(find ./crates -maxdepth 1 -type d -iname "merge*core" | head -n 1)
          if [ -z "$CORE_DIR" ]; then
            echo "ERROR: Could not find core directory!"
            exit 1
          fi
          CORE_NAME=$(basename "$CORE_DIR")
          echo "Found core directory: $CORE_NAME"
          
          # 統一したディレクトリ名を使用する
          STANDARD_CORE_NAME="mergeusc_core"
          if [ "$CORE_NAME" != "$STANDARD_CORE_NAME" ]; then
            echo "Creating symbolic link from $CORE_NAME to $STANDARD_CORE_NAME"
            ln -sf "$CORE_NAME" "./crates/$STANDARD_CORE_NAME"
          fi

      - name: Create workspace Cargo.toml
        run: |
          cat > Cargo.toml << 'EOF'
          [workspace]
          members = [
              "crates/cli"
          ]
          resolver = "2"

          [profile.release]
          opt-level = 3
          lto = true
          codegen-units = 1
          EOF
          echo "Created workspace Cargo.toml"

      - name: Update cli Cargo.toml
        run: |
          # cliのCargo.tomlを更新して確実にビルドできるようにする
          sed -i 's|path = "../MergeUSC_Core"|path = "../mergeusc_core"|' crates/cli/Cargo.toml

      - name: Build CLI
        run: |
          # ルートディレクトリからビルド
          cargo build --release

      - name: Find binary
        run: |
          # ビルドされたバイナリを探索
          find . -name "mergeusc_cli" -type f -executable

      - name: Package
        run: |
          mkdir -p release
          # find コマンドでバイナリを見つけてコピー
          BINARY_PATH=$(find . -name "mergeusc_cli" -type f -executable | head -n 1)
          if [ -z "$BINARY_PATH" ]; then
            echo "ERROR: Binary not found!"
            exit 1
          fi
          echo "Found binary at: $BINARY_PATH"
          cp "$BINARY_PATH" release/mergeusc_cli-linux
          cd release && tar -czf mergeusc_cli-linux.tar.gz mergeusc_cli-linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mergeusc_cli-linux
          path: release/mergeusc_cli-linux.tar.gz
          retention-days: 1

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-pc-windows-msvc

      - name: Debug directory structure
        run: |
          # ディレクトリ構造の詳細確認
          Write-Output "Current directory structure:"
          Get-ChildItem -Path . -Recurse -Directory | Sort-Object FullName | ForEach-Object { Write-Output $_.FullName }
          
          Write-Output "`nSearching for core directories:"
          Get-ChildItem -Path . -Recurse -Directory | Where-Object { $_.Name -match "merge|core" -or $_.Name -match "Merge|Core" } | ForEach-Object { Write-Output "$($_.FullName) - $($_.Name)" }

      - name: Create workspace Cargo.toml
        run: |
          @"
          [workspace]
          members = [
              "crates/cli"
          ]
          resolver = "2"

          [profile.release]
          opt-level = 3
          lto = true
          codegen-units = 1
          "@ | Set-Content -Path Cargo.toml -Encoding UTF8

      - name: Update paths directly
        run: |
          # 明示的にパスを更新（ディレクトリ名検索を回避）
          Write-Output "Updating dependency paths..."
          
          # 既知の可能性のあるパスを確認
          $corePaths = @(
            "./crates/MergeUSC_Core",
            "./crates/mergeUsc_Core", 
            "./crates/mergeusc_core"
          )
          
          $validCorePath = $null
          foreach ($path in $corePaths) {
            if (Test-Path $path -PathType Container) {
              $validCorePath = $path
              Write-Output "Found core directory: $validCorePath"
              break
            }
          }
          
          if ($null -eq $validCorePath) {
            Write-Error "No core directory found in any expected location!"
            exit 1
          }
          
          # CLI の Cargo.toml を更新
          $cliCargoContent = Get-Content crates/cli/Cargo.toml
          $updatedContent = $cliCargoContent -replace 'path = "../MergeUSC_Core"', ('path = "..' + $validCorePath.Substring($validCorePath.LastIndexOf('/')) + '"')
          $updatedContent | Set-Content crates/cli/Cargo.toml -Encoding UTF8
          
          Write-Output "Updated CLI Cargo.toml with core path: $validCorePath"

      - name: Build CLI
        run: |
          # クレートのディレクトリに移動してからビルド
          cd crates/cli
          cargo build --release

      - name: Find binary
        run: |
          # ビルドされたバイナリを探索
          Get-ChildItem -Path . -Recurse -Filter "mergeusc_cli.exe" | Select-Object FullName

      - name: Package
        run: |
          New-Item -Path release -ItemType Directory -Force
          # Find Binary ステップで確認したパスを使用
          $binaryPath = ".\target\release\mergeusc_cli.exe"
          if (-not (Test-Path $binaryPath)) {
            Write-Error "Binary not found at expected path: $binaryPath"
            Get-ChildItem -Path . -Recurse -Filter "*.exe" | Select-Object FullName
            exit 1
          }
          Write-Output "Found binary at: $binaryPath"
          Copy-Item $binaryPath -Destination release/mergeusc_cli-windows.exe
          cd release
          7z a -tzip mergeusc_cli-windows.zip mergeusc_cli-windows.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mergeusc_cli-windows
          path: release/mergeusc_cli-windows.zip
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: mergeusc_cli-linux
          path: ./artifacts

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: mergeusc_cli-windows
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          files: |
            ./artifacts/mergeusc_cli-linux.tar.gz
            ./artifacts/mergeusc_cli-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}